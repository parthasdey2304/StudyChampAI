import AsyncStorage from '@react-native-async-storage/async-storage';
import RNHTMLtoPDF from 'react-native-html-to-pdf';
import { Alert, Linking, Platform } from 'react-native';
import { aiService } from './aiService';

export interface StudyNote {
  id: string;
  topic: string;
  content: string;
  htmlContent: string;
  pdfUrl?: string;
  createdAt: Date;
}

class PDFService {
  private readonly NOTES_STORAGE_KEY = '@study_notes';

  // Generate AI notes for a topic
  async generateNotesForTopic(topic: string): Promise<StudyNote> {
    try {
      // Get AI response for comprehensive notes
      const aiResponse = await aiService.sendMessage(
        `Create comprehensive study notes for the topic: ${topic}. 
        Include key concepts, definitions, examples, and important formulas. 
        Format it as a structured document with headings and bullet points.
        Make it suitable for studying and revision.`
      );

      // Convert to HTML format for PDF generation
      const htmlContent = this.formatContentAsHTML(aiResponse.content, topic);

      const note: StudyNote = {
        id: Date.now().toString(),
        topic,
        content: aiResponse.content,
        htmlContent,
        createdAt: new Date(),
      };

      // Save note to local storage
      await this.saveNote(note);

      return note;
    } catch (error) {
      console.error('Error generating notes:', error);
      throw new Error('Failed to generate notes');
    }
  }

  // Convert text content to HTML format
  private formatContentAsHTML(content: string, topic: string): string {
    // Basic HTML formatting
    let formattedContent = content
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/â€¢/g, '&bull;');

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Study Notes: ${topic}</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 40px;
            color: #333;
          }
          h1 {
            color: #1DB954;
            border-bottom: 2px solid #1DB954;
            padding-bottom: 10px;
          }
          h2 {
            color: #2c5f2d;
            margin-top: 30px;
          }
          h3 {
            color: #4a7c59;
          }
          p {
            margin: 15px 0;
            text-align: justify;
          }
          .highlight {
            background-color: #fff3cd;
            padding: 2px 4px;
            border-radius: 3px;
          }
          .formula {
            background-color: #f8f9fa;
            border-left: 4px solid #1DB954;
            padding: 10px;
            margin: 15px 0;
            font-family: monospace;
          }
          .footer {
            margin-top: 50px;
            text-align: center;
            font-size: 12px;
            color: #666;
            border-top: 1px solid #ddd;
            padding-top: 20px;
          }
        </style>
      </head>
      <body>
        <h1>ðŸ“š Study Notes: ${topic}</h1>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
        <hr>
        <div class="content">
          <p>${formattedContent}</p>
        </div>
        <div class="footer">
          <p>Generated by StudyChampAI - Your AI Study Assistant</p>
        </div>
      </body>
      </html>
    `;
  }

  // Generate PDF from HTML content
  async generatePDF(note: StudyNote): Promise<string> {
    try {
      const options = {
        html: note.htmlContent,
        fileName: `StudyNotes_${note.topic.replace(/[^a-zA-Z0-9]/g, '_')}_${note.id}`,
        directory: Platform.OS === 'ios' ? 'Documents' : 'Downloads',
        width: 612,
        height: 792,
        padding: 40,
        bgColor: '#FFFFFF',
      };

      const file = await RNHTMLtoPDF.convert(options);
      
      if (file.filePath) {
        // Update note with PDF path
        const updatedNote = { ...note, pdfUrl: file.filePath };
        await this.saveNote(updatedNote);
        
        return file.filePath;
      } else {
        throw new Error('PDF generation failed');
      }
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw new Error('Failed to generate PDF');
    }
  }

  // Save note to local storage
  private async saveNote(note: StudyNote): Promise<void> {
    try {
      const existingNotes = await this.getSavedNotes();
      const updatedNotes = existingNotes.filter(n => n.id !== note.id);
      updatedNotes.unshift(note);
      
      await AsyncStorage.setItem(
        this.NOTES_STORAGE_KEY, 
        JSON.stringify(updatedNotes)
      );
    } catch (error) {
      console.error('Error saving note:', error);
    }
  }

  // Get all saved notes
  async getSavedNotes(): Promise<StudyNote[]> {
    try {
      const notesJson = await AsyncStorage.getItem(this.NOTES_STORAGE_KEY);
      if (notesJson) {
        const notes = JSON.parse(notesJson);
        return notes.map((note: any) => ({
          ...note,
          createdAt: new Date(note.createdAt)
        }));
      }
      return [];
    } catch (error) {
      console.error('Error loading notes:', error);
      return [];
    }
  }

  // Open PDF file
  async openPDF(pdfPath: string): Promise<void> {
    try {
      const url = Platform.OS === 'ios' ? `file://${pdfPath}` : `file://${pdfPath}`;
      const supported = await Linking.canOpenURL(url);
      
      if (supported) {
        await Linking.openURL(url);
      } else {
        Alert.alert(
          'Cannot open PDF',
          'No PDF viewer app found. Please install a PDF reader.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('Error opening PDF:', error);
      Alert.alert('Error', 'Failed to open PDF file');
    }
  }

  // Share PDF file
  async sharePDF(pdfPath: string, topic: string): Promise<void> {
    try {
      // This would integrate with React Native Share
      Alert.alert(
        'Share Notes',
        `Share study notes for "${topic}"?`,
        [
          { text: 'Cancel', style: 'cancel' },
          { text: 'Share', onPress: () => {
            // TODO: Implement sharing functionality
            Alert.alert('Coming Soon', 'PDF sharing will be available soon!');
          }}
        ]
      );
    } catch (error) {
      console.error('Error sharing PDF:', error);
      Alert.alert('Error', 'Failed to share PDF file');
    }
  }

  // Delete note
  async deleteNote(noteId: string): Promise<void> {
    try {
      const existingNotes = await this.getSavedNotes();
      const updatedNotes = existingNotes.filter(note => note.id !== noteId);
      
      await AsyncStorage.setItem(
        this.NOTES_STORAGE_KEY,
        JSON.stringify(updatedNotes)
      );
    } catch (error) {
      console.error('Error deleting note:', error);
      throw new Error('Failed to delete note');
    }
  }

  // Generate and download PDF for a topic
  async generateAndDownloadNotes(topic: string): Promise<string> {
    try {
      // Generate notes
      const note = await this.generateNotesForTopic(topic);
      
      // Generate PDF
      const pdfPath = await this.generatePDF(note);
      
      Alert.alert(
        'Notes Generated! ðŸ“„',
        `Study notes for "${topic}" have been generated and saved.`,
        [
          { text: 'View PDF', onPress: () => this.openPDF(pdfPath) },
          { text: 'Share', onPress: () => this.sharePDF(pdfPath, topic) },
          { text: 'Done', style: 'default' }
        ]
      );

      return pdfPath;
    } catch (error) {
      console.error('Error generating and downloading notes:', error);
      Alert.alert('Error', 'Failed to generate study notes. Please try again.');
      throw error;
    }
  }
}

export const pdfService = new PDFService();
